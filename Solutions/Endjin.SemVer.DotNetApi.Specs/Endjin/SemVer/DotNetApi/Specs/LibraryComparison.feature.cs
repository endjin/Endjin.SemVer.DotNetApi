// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Endjin.SemVer.DotNetApi.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LibraryComparison")]
    public partial class LibraryComparisonFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "LibraryComparison.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LibraryComparison", "    In order to be able to determine whether a new version of a library follows s" +
                    "emantic versioning rules\r\n    As a developer of semantic version checking tools\r" +
                    "\n    I want to be able to discover the changes between two versions of a compone" +
                    "nt", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Type added")]
        public virtual void TypeAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Type added", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    testRunner.Given("generator \'c1\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("generator \'c2\' defines a class named \'Test.Type2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("class \'c1\' has a method named \'Method1\' with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
    testRunner.And("class \'c2\' has a method named \'Method1\' with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.And("class \'c2\' has a method named \'Method2\' with signature type \'StringReturnStringAn" +
                        "dIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
    testRunner.And("class \'c2\' has a read/write property named \'Property1\' of type \'double\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
    testRunner.And("class \'c2\' has an event named \'Event1\' of type \'System.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
    testRunner.And("class \'c2\' has a field named \'Field1\' of type \'long\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
    testRunner.And("the old assembly has the class \'c1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.And("the new assembly has the class \'c1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And("the new assembly has the class \'c2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
    testRunner.Then("the LibraryChanges should report 1 added type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.And("the LibraryChanges should report 0 changed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.And("LibraryChanges.TypesAdded should contain type named \'Test.Type2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 1 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should have new constructor matching signa" +
                        "ture \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 2 added method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should have new method \'Method1\' matching " +
                        "signature \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should have new method \'Method2\' matching " +
                        "signature \'StringReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 1 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should have new read/write property \'Prope" +
                        "rty1\' of type \'System.Double\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 1 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should have new field \'Field1\' of type \'Sy" +
                        "stem.Int64\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 1 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should have new event \'Event1\' of type \'Sy" +
                        "stem.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Type removed")]
        public virtual void TypeRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Type removed", null, tagsOfScenario, argumentsOfScenario);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
    testRunner.Given("generator \'c1\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
    testRunner.And("generator \'c2\' defines a class named \'Test.Type2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
    testRunner.And("class \'c1\' has a method named \'Method1\' with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
    testRunner.And("class \'c2\' has a method named \'Method1\' with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("class \'c2\' has a method named \'Method2\' with signature type \'StringReturnStringAn" +
                        "dIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("class \'c2\' has a read/write property named \'Property1\' of type \'double\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.And("class \'c2\' has an event named \'Event1\' of type \'System.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.And("class \'c2\' has a field named \'Field1\' of type \'long\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
    testRunner.And("the old assembly has the class \'c1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
    testRunner.And("the old assembly has the class \'c2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.And("the new assembly has the class \'c1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
    testRunner.Then("the LibraryChanges should report 0 added type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
    testRunner.And("the LibraryChanges should report 0 changed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
    testRunner.And("the LibraryChanges should report 1 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
    testRunner.And("LibraryChanges.TypesRemoved should contain type named \'Test.Type2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 1 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should have removed constructor matching" +
                        " signature \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 2 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should have removed method \'Method1\' mat" +
                        "ching signature \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should have removed method \'Method2\' mat" +
                        "ching signature \'StringReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 1 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should have removed read/write property " +
                        "\'Property1\' of type \'System.Double\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 1 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should have removed field \'Field1\' of ty" +
                        "pe \'System.Int64\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 1 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should have removed event \'Event1\' of ty" +
                        "pe \'System.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Type with non default ctor added")]
        public virtual void TypeWithNonDefaultCtorAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Type with non default ctor added", null, tagsOfScenario, argumentsOfScenario);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
    testRunner.Given("generator \'c1\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
    testRunner.And("generator \'c2\' defines a class named \'Test.Type2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
    testRunner.And("class \'c2\' has a constructor with signature type \'VoidReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
    testRunner.And("the old assembly has the class \'c1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
    testRunner.And("the new assembly has the class \'c1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.And("the new assembly has the class \'c2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
    testRunner.Then("the LibraryChanges should report 1 added type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    testRunner.And("the LibraryChanges should report 0 changed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("LibraryChanges.TypesAdded should contain type named \'Test.Type2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 1 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should have new constructor matching signa" +
                        "ture \'VoidReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 added method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
    testRunner.And("LibraryChanges.TypesAdded \'Test.Type2\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Type with non default ctor removed")]
        public virtual void TypeWithNonDefaultCtorRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Type with non default ctor removed", null, tagsOfScenario, argumentsOfScenario);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
    testRunner.Given("generator \'c1\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
    testRunner.And("generator \'c2\' defines a class named \'Test.Type2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
    testRunner.And("class \'c2\' has a constructor with signature type \'VoidReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
    testRunner.And("the old assembly has the class \'c1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
    testRunner.And("the old assembly has the class \'c2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
    testRunner.And("the new assembly has the class \'c1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
    testRunner.Then("the LibraryChanges should report 0 added type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
    testRunner.And("the LibraryChanges should report 0 changed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
    testRunner.And("the LibraryChanges should report 1 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
    testRunner.And("LibraryChanges.TypesRemoved should contain type named \'Test.Type2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 1 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should have removed constructor matching" +
                        " signature \'VoidReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
    testRunner.And("LibraryChanges.TypesRemoved \'Test.Type2\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constructor added")]
        public virtual void ConstructorAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor added", null, tagsOfScenario, argumentsOfScenario);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 123
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 124
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
    testRunner.And("class \'c1b\' has a constructor with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
    testRunner.And("class \'c1b\' has a constructor with signature type \'VoidReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
    testRunner.And("class \'c1a\' has a method named \'MethodUnchanging\' with signature type \'VoidNoPara" +
                        "ms\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
    testRunner.And("class \'c1a\' has a read/write property named \'PropertyUnchanging\' of type \'double\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.And("class \'c1a\' has an event named \'EventUnchanging\' of type \'System.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.And("class \'c1a\' has a field named \'FieldUnchanging\' of type \'long\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
    testRunner.And("class \'c1b\' has a method named \'MethodUnchanging\' with signature type \'VoidNoPara" +
                        "ms\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
    testRunner.And("class \'c1b\' has a read/write property named \'PropertyUnchanging\' of type \'double\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
    testRunner.And("class \'c1b\' has an event named \'EventUnchanging\' of type \'System.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
    testRunner.And("class \'c1b\' has a field named \'FieldUnchanging\' of type \'long\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should have new constructor matching sig" +
                        "nature \'VoidReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Constructor removed")]
        public virtual void ConstructorRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor removed", null, tagsOfScenario, argumentsOfScenario);
#line 157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 158
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 159
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
    testRunner.And("class \'c1a\' has a constructor with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
    testRunner.And("class \'c1a\' has a constructor with signature type \'VoidReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 167
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should have removed constructor matching" +
                        " signature \'VoidReturnStringAndIntParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Method added")]
        [NUnit.Framework.TestCaseAttribute("VoidNoParams", null)]
        [NUnit.Framework.TestCaseAttribute("VoidReturnStringAndIntParams", null)]
        [NUnit.Framework.TestCaseAttribute("StringReturnNoParams", null)]
        [NUnit.Framework.TestCaseAttribute("StringReturnStringAndIntParams", null)]
        public virtual void MethodAdded(string signature, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("signature", signature);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method added", null, tagsOfScenario, argumentsOfScenario);
#line 182
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 183
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 184
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
    testRunner.And(string.Format("class \'c1b\' has a method named \'Method1\' with signature type \'{0}\'", signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
    testRunner.And(string.Format("LibraryChanges.TypesChanged \'Test.Type1\' should have new method \'Method1\' matchin" +
                            "g signature \'{0}\'", signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Method removed")]
        [NUnit.Framework.TestCaseAttribute("VoidNoParams", null)]
        [NUnit.Framework.TestCaseAttribute("VoidReturnStringAndIntParams", null)]
        [NUnit.Framework.TestCaseAttribute("StringReturnNoParams", null)]
        [NUnit.Framework.TestCaseAttribute("StringReturnStringAndIntParams", null)]
        public virtual void MethodRemoved(string signature, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("signature", signature);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method removed", null, tagsOfScenario, argumentsOfScenario);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 214
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 215
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
    testRunner.And(string.Format("class \'c1a\' has a method named \'Method1\' with signature type \'{0}\'", signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 221
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 222
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 223
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 224
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 225
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 226
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 227
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 228
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 229
    testRunner.And(string.Format("LibraryChanges.TypesChanged \'Test.Type1\' should have removed method \'Method1\' mat" +
                            "ching signature \'{0}\'", signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 230
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 231
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 232
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 233
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 234
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 235
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Method overload added")]
        [NUnit.Framework.TestCaseAttribute("VoidReturnStringParams", null)]
        [NUnit.Framework.TestCaseAttribute("VoidReturnStringAndIntParams", null)]
        public virtual void MethodOverloadAdded(string signature, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("signature", signature);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method overload added", null, tagsOfScenario, argumentsOfScenario);
#line 245
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 246
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 247
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 248
    testRunner.And("class \'c1a\' has a method named \'Method1\' with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
    testRunner.And("class \'c1b\' has a method named \'Method1\' with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 250
    testRunner.And(string.Format("class \'c1b\' has a method named \'Method1\' with signature type \'{0}\'", signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 252
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 253
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 255
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 257
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 258
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 259
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 260
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 261
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
    testRunner.And(string.Format("LibraryChanges.TypesChanged \'Test.Type1\' should have new method \'Method1\' matchin" +
                            "g signature \'{0}\'", signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 265
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 266
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 267
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 268
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 269
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Method overload removed")]
        [NUnit.Framework.TestCaseAttribute("VoidReturnStringParams", null)]
        [NUnit.Framework.TestCaseAttribute("VoidReturnStringAndIntParams", null)]
        public virtual void MethodOverloadRemoved(string signature, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("signature", signature);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method overload removed", null, tagsOfScenario, argumentsOfScenario);
#line 276
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 277
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 278
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 279
    testRunner.And("class \'c1a\' has a method named \'Method1\' with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 280
    testRunner.And("class \'c1b\' has a method named \'Method1\' with signature type \'VoidNoParams\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 281
    testRunner.And(string.Format("class \'c1a\' has a method named \'Method1\' with signature type \'{0}\'", signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 282
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 283
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 284
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 285
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 286
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 287
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 290
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 291
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 292
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 293
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 294
    testRunner.And(string.Format("LibraryChanges.TypesChanged \'Test.Type1\' should have removed method \'Method1\' mat" +
                            "ching signature \'{0}\'", signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 295
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 296
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 297
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 298
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 299
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 300
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Property added")]
        public virtual void PropertyAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property added", null, tagsOfScenario, argumentsOfScenario);
#line 307
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 308
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 309
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 310
    testRunner.And("class \'c1b\' has a read/write property named \'Property1\' of type \'double\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 311
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 312
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 313
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 314
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 315
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 316
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 317
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 318
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 319
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 320
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 321
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 322
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 323
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 324
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 325
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should have new read/write property \'Pro" +
                        "perty1\' of type \'System.Double\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 326
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 327
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 328
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 329
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Property removed")]
        public virtual void PropertyRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property removed", null, tagsOfScenario, argumentsOfScenario);
#line 331
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 332
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 333
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 334
    testRunner.And("class \'c1a\' has a read/write property named \'Property1\' of type \'double\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 335
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 336
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 337
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 338
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 339
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 340
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 341
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 342
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 343
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 344
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 345
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 346
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 347
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 348
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 349
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should have removed read/write property " +
                        "\'Property1\' of type \'System.Double\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 350
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 351
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 352
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 353
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Field added")]
        public virtual void FieldAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Field added", null, tagsOfScenario, argumentsOfScenario);
#line 355
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 356
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 357
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 358
    testRunner.And("class \'c1b\' has a field named \'Field1\' of type \'short\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 359
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 360
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 361
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 362
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 363
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 364
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 365
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 366
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 367
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 368
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 369
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 370
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 371
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 372
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 373
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 374
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 375
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should have new field \'Field1\' of type \'" +
                        "System.Int16\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 376
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 377
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Field removed")]
        public virtual void FieldRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Field removed", null, tagsOfScenario, argumentsOfScenario);
#line 379
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 380
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 381
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 382
    testRunner.And("class \'c1a\' has a field named \'Field1\' of type \'short\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 383
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 384
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 385
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 386
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 387
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 388
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 389
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 390
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 391
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 392
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 393
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 394
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 395
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 396
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 397
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 398
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 399
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should have removed field \'Field1\' of ty" +
                        "pe \'System.Int16\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 400
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 401
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Event added")]
        public virtual void EventAdded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event added", null, tagsOfScenario, argumentsOfScenario);
#line 403
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 404
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 405
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 406
    testRunner.And("class \'c1b\' has an event named \'Event1\' of type \'System.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 407
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 408
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 409
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 410
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 411
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 412
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 413
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 414
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 415
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 416
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 417
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 418
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 419
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 420
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 421
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 422
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 423
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 424
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 425
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should have new event \'Event1\' of type \'" +
                        "System.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Event removed")]
        public virtual void EventRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event removed", null, tagsOfScenario, argumentsOfScenario);
#line 427
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 428
    testRunner.Given("generator \'c1a\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 429
    testRunner.And("generator \'c1b\' defines a class named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 430
    testRunner.And("class \'c1a\' has an event named \'Event1\' of type \'System.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 431
    testRunner.And("classes \'c1a\' and \'c1b\' each have some identical methods, properties, events, and" +
                        " fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 432
    testRunner.And("the old assembly has the class \'c1a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 433
    testRunner.And("the new assembly has the class \'c1b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 434
    testRunner.When("I compare the assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 435
    testRunner.Then("the LibraryChanges should report 0 added types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 436
    testRunner.And("the LibraryChanges should report 1 changed type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 437
    testRunner.And("the LibraryChanges should report 0 removed types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 438
    testRunner.And("LibraryChanges.TypesChanged should contain type named \'Test.Type1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 439
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 440
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added constructors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 441
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 442
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 443
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 444
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 445
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 removed fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 446
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 447
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 1 removed events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 448
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should report 0 added events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 449
    testRunner.And("LibraryChanges.TypesChanged \'Test.Type1\' should have removed event \'Event1\' of ty" +
                        "pe \'System.EventHandler\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
